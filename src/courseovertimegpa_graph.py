# -*- coding: utf-8 -*-
"""CourseOverTimeGPA_Graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mzrhFcW_JaX3fJOTxUwYl_QAgT4l4pdC
"""

import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

# === Load CSV ===
file_path = "SCAI Grade Distribution Fall 22- Spring 25(Sheet1).csv" # <--- !! THIS NEEDS TO BE CHANGED FOR FINAL PRODUCT !!
df_all = pd.read_csv(file_path)
df_all['Strm'] = df_all['Strm'].astype(int)

# === Config ===
COURSE_FILTER = "CSE 598"   # <--- change this to any course !! THIS NEEDS TO BE CHANGED FOR FINAL PRODUCT !!

# === GPA Scale ===
gpa_scale = {
    "A+": 4.33, "A": 4.0, "A-": 3.67,
    "B+": 3.33, "B": 3.0, "B-": 2.67,
    "C+": 2.33, "C": 2.0, "D": 1.0, "E": 0.0
}
grade_cols = list(gpa_scale.keys())

# === Compute GPA ===
def compute_gpa(row):
    total_points, total_students = 0.0, 0
    for g in grade_cols:
        cnt = row.get(g, 0)
        cnt = 0 if pd.isna(cnt) else int(cnt)
        total_points += cnt * gpa_scale[g]
        total_students += cnt
    return total_points / total_students if total_students > 0 else None

df_all["Average_GPA"] = df_all.apply(compute_gpa, axis=1)
df_all["Course"] = (
    df_all["Subject"].astype(str).str.strip()
    + " "
    + df_all["Catalog Nbr"].astype(str).str.strip()
)

# === Decode STRM to semester ===
def decode_strm(strm):
    strm = int(strm)
    year_code = strm // 10
    term_code = strm % 10

    year = 1800 + year_code  # 221 → 2021, 222 → 2022, etc.
    term_map = {1: "Spring", 4: "Summer", 7: "Fall"}
    term = term_map.get(term_code, f"UnknownTerm({term_code})")

    return f"{term} {year}"

# --- Dynamically generate semester order ---
# Decode all STRM values in your data
df_all["Semester"] = df_all["Strm"].map(decode_strm)

# Define term ordering (for correct chronological sorting)
term_order = {"Spring": 1, "Summer": 2, "Fall": 3}

# Sort unique semesters by year and term
semester_order = (
    df_all["Semester"]
    .dropna()
    .unique()
)
# Split and sort
semester_order = sorted(
    semester_order,
    key=lambda x: (
        int(x.split()[1]),       # year
        term_order.get(x.split()[0], 99)  # term
    )
)
# === Filter by course ===
df_course = df_all[df_all["Course"] == COURSE_FILTER].copy()
if df_course.empty:
    raise ValueError(f"No data found for {COURSE_FILTER}")

# === Aggregate by semester & instructor ===
grouped = (
    df_course.groupby(["Strm", "Instructor"], as_index=False)
    .agg({
        "Average_GPA": "mean",
        "Title": lambda x: ", ".join(x.dropna().unique())
    })
)
grouped["Semester"] = grouped["Strm"].map(decode_strm)
grouped = grouped.sort_values("Strm")

# === Color palette (same as before) ===
color_sequences = [
    px.colors.qualitative.Plotly,
    px.colors.qualitative.Bold,
    px.colors.qualitative.Vivid,
    px.colors.qualitative.Set3,
    px.colors.qualitative.Pastel,
    px.colors.qualitative.Dark24,
    px.colors.qualitative.Light24
]
large_palette = []
for seq in color_sequences:
    large_palette.extend(seq)

# Remove duplicates
seen, unique_palette = set(), []
for color in large_palette:
    if color not in seen:
        seen.add(color)
        unique_palette.append(color)

# Assign colors
instructors = [i for i in grouped["Instructor"].unique() if i != "(no data)"]
instructor_colors = {
    inst: unique_palette[i % len(unique_palette)] for i, inst in enumerate(instructors)
}

# === Compute avg & std per semester ===
stats = (
    grouped[grouped["Instructor"] != "(no data)"]
    .groupby("Semester", as_index=False)
    .agg(mean_gpa=("Average_GPA", "mean"), std_gpa=("Average_GPA", "std"))
)
stats["Semester"] = pd.Categorical(stats["Semester"], categories=semester_order, ordered=True)
stats = stats.sort_values("Semester")

# === Determine y-axis range ===
all_gpas = grouped["Average_GPA"].dropna()
y_min = max(0, all_gpas.min() - 0.07) if not all_gpas.empty else 0
y_max = min(4.33, all_gpas.max() + 0.07) if not all_gpas.empty else 4.33

# === Plot ===
fig = go.Figure()

# --- Average GPA line ---
fig.add_trace(go.Scatter(
    x=stats["Semester"],
    y=stats["mean_gpa"],
    mode="lines+markers",
    name="Average (All Instructors)",
    line=dict(color="orange", width=2),
    marker=dict(size=8, symbol="diamond", color="orange"),
    hoverinfo="skip"
))

# --- ±1 SD lines ---
fig.add_trace(go.Scatter(
    x=stats["Semester"],
    y=stats["mean_gpa"] + stats["std_gpa"],
    mode="lines",
    name="+1 SD",
    line=dict(color="green", width=1.5, dash="dash"),
    hoverinfo="skip"
))
fig.add_trace(go.Scatter(
    x=stats["Semester"],
    y=stats["mean_gpa"] - stats["std_gpa"],
    mode="lines",
    name="-1 SD",
    line=dict(color="red", width=1.5, dash="dash"),
    hoverinfo="skip"
))

# --- Instructor scatter points (same colors) ---
for instructor in instructors:
    sub = grouped[grouped["Instructor"] == instructor]
    fig.add_trace(go.Scatter(
        x=sub["Semester"],
        y=sub["Average_GPA"],
        mode="markers",
        name=instructor,
        marker=dict(
            size=12,
            color=instructor_colors[instructor],
            line=dict(width=1, color="white")
        ),
        hoverinfo="skip"
    ))

# === Layout ===
fig.update_layout(
    template="plotly_dark",
    title=f"{COURSE_FILTER} Average GPA Over Time ",
    xaxis_title="Semester",
    yaxis_title="Average GPA",
    height=750,  # more vertical room overall
    margin=dict(l=80, r=100, t=80, b=50),  # big bottom margin for legend
    hovermode=False,
    dragmode=False,
    showlegend=True,
    legend=dict(
        title="Instructor",
        orientation="h",      # horizontal layout
        yanchor="top",
        y=-0.3,              # push fully below x-axis labels
        xanchor="center",
        x=0.44,
        traceorder="normal",
        itemsizing="trace",
        font=dict(size=12)
    )
)


# Lock axes and remove interactions
fig.update_xaxes(
    categoryorder="array",
    categoryarray=semester_order,
    tickangle=-45,
    fixedrange=True
)
fig.update_yaxes(range=[y_min, y_max], fixedrange=True)

# === Disable all interactivity ===
fig.show(config={
    "staticPlot": True,
    "displayModeBar": False,
    "editable": False
})